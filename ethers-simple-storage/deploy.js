const { ethers } = require("ethers")
const fs = require("fs")
require("dotenv").config()

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)

    // Encryption of Private key with real funds
    // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedJson,
    //   process.env.PRIVATE_KEY_PASSWORD
    // );
    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    )

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log("Deploying, please wait...")
    const contract = await contractFactory.deploy()
    await contract.deployTransaction.wait(1)

    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063092a18201461005c5780632e64cec11461008d5780636057361d146100ab5780638bab8dd5146100c7578063a7279116146100f7575b600080fd5b6100766004803603810190610071919061038d565b610113565b604051610084929190610462565b60405180910390f35b6100956101cf565b6040516100a29190610492565b60405180910390f35b6100c560048036038101906100c0919061038d565b6101d8565b005b6100e160048036038101906100dc91906105e2565b6101e2565b6040516100ee9190610492565b60405180910390f35b610111600480360381019061010c919061062b565b610210565b005b6002818154811061012357600080fd5b906000526020600020906002020160009150905080600001549080600101805461014c906106b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610178906106b6565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b5050505050905082565b60008054905090565b8060008190555050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600260405180604001604052808481526020018381525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102769291906102a0565b5050508160018260405161028a9190610724565b9081526020016040518091039020819055505050565b8280546102ac906106b6565b90600052602060002090601f0160209004810192826102ce5760008555610315565b82601f106102e757805160ff1916838001178555610315565b82800160010185558215610315579182015b828111156103145782518255916020019190600101906102f9565b5b5090506103229190610326565b5090565b5b8082111561033f576000816000905550600101610327565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61036a81610357565b811461037557600080fd5b50565b60008135905061038781610361565b92915050565b6000602082840312156103a3576103a261034d565b5b60006103b184828501610378565b91505092915050565b6103c381610357565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104035780820151818401526020810190506103e8565b83811115610412576000848401525b50505050565b6000601f19601f8301169050919050565b6000610434826103c9565b61043e81856103d4565b935061044e8185602086016103e5565b61045781610418565b840191505092915050565b600060408201905061047760008301856103ba565b81810360208301526104898184610429565b90509392505050565b60006020820190506104a760008301846103ba565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104ef82610418565b810181811067ffffffffffffffff8211171561050e5761050d6104b7565b5b80604052505050565b6000610521610343565b905061052d82826104e6565b919050565b600067ffffffffffffffff82111561054d5761054c6104b7565b5b61055682610418565b9050602081019050919050565b82818337600083830152505050565b600061058561058084610532565b610517565b9050828152602081018484840111156105a1576105a06104b2565b5b6105ac848285610563565b509392505050565b600082601f8301126105c9576105c86104ad565b5b81356105d9848260208601610572565b91505092915050565b6000602082840312156105f8576105f761034d565b5b600082013567ffffffffffffffff81111561061657610615610352565b5b610622848285016105b4565b91505092915050565b600080604083850312156106425761064161034d565b5b600061065085828601610378565b925050602083013567ffffffffffffffff81111561067157610670610352565b5b61067d858286016105b4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106ce57607f821691505b602082108114156106e2576106e1610687565b5b50919050565b600081905092915050565b60006106fe826103c9565b61070881856106e8565b93506107188185602086016103e5565b80840191505092915050565b600061073082846106f3565b91508190509291505056fea26469706673582212200d2756dc82c4a3551c5bfdeddbb5d253d5b9fe4246154cb4e4b37d0558d6593264736f6c63430008080033",
    //   chainId: 1337,
    // };
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    const currentFavoriteNumber = await contract.retrieve()
    console.log(`Current favorite number: ${currentFavoriteNumber.toString()}`)
    const transactionResponse = await contract.store("7")
    const transactionReceipt = await transactionResponse.wait(1)
    const updatedFavoriteNumber = await contract.retrieve()
    console.log(`Updated favorite number: ${updatedFavoriteNumber.toString()}`)
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.log(error)
        process.exit(1)
    })
